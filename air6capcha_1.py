from cgi import test
from cgitb import text
from multiprocessing.connection import Client
from turtle import right
from telethon.tl.functions.messages import StartBotRequest
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.sync import TelegramClient
import time, random ,requests , os
from anticaptchaofficial.imagecaptcha import * #ƒë√¢y n√†y
import multiprocessing # mu·ªën x√†i ƒëa lu·ªìng th√¨ import th·∫±ng n√†y
def Captcha_imanage(Client,phone,botid): 
    try:
        solver = imagecaptcha()
        solver.set_verbose(1)
        solver.set_key("key") #gi·ªù ch·ªó n√†y ƒëi·ªÅn key v√†o l√† n√≥ t·ª± gi·∫£i capcha ·∫£nh ph·ªèng ?. ·ª´ capthca ki·ªÉu nh√¨n h√¨nh g√µ ra ch·ªØ ƒë√≥ , c√≤n capcha ƒëi·ªán tho·∫°i , radio th√¨ sao, kh√¥ng bi·∫øt n√≥ gi·∫£i ƒë∆∞·ª£c kh√¥ng ch∆∞a th·ª≠
      
        messages = Client.get_messages(botid)
        msg = messages[0]
        
       
        imageLink = "files/" + phone 
        imageFile =  Client.download_media(msg.media, imageLink ) #c√≤n ch·ªó n√†o l·∫° n·ªØa k nh·ªâ. h√†m captcha n√†y copy ch·ª© c√≥ s·ª≠a g√¨ ƒë√¢u m
        captcha_text = 0 
        captcha_text = solver.solve_and_return_solution(imageFile)   #nh·∫≠n captcha t·ª´ anticaptcha
        os.remove(imageFile)
        
        if captcha_text != 0:
            print("captcha text "+captcha_text)
            Client.send_message(botid, captcha_text)          #Send captcha t·ª´ anticaptcha v√†o con bot
            time.sleep(random.randint(3,5))
            messages =  Client.get_messages(botid)             # Sau khi sent, nh·∫≠n k·∫øt qu·∫£ t·ª´ con bot 
            if messages[0].message.find('Wrong captcha') != -1:   #Ki·ªÉm tra xem captcha ƒë√∫ng ch∆∞a
                return False
            return True        
        else:
            print("task finished with error "+solver.error_code)
            return False 
    except: print("Loi khong xac dinh")

def gettxt(filetxt):
    with open(filetxt , 'r') as file:
        list = file.readlines()
    list_strip = []
    for i in list:
        list_strip.append(i.strip())
    return list_strip

def wait(Client,botID,check):

    time.sleep(random.randint(2,5))
    for i in range(0,10):
        tmp = Client.get_messages(botID)
        if str(tmp[0].message).find(check) != -1:
            return True
        else:time.sleep(5)

    Client.disconnect()
    return False


def task(phone,api_id,api_hash,botid,tentw,wall,ref):
   
    Client = TelegramClient("C:\\Users\\vutha\\Downloads\\Telegram Desktop\\session\\"+phone+".session", api_id, api_hash) #dang test con bot ƒë√¢y f5 ƒëi
    Client.connect()
    print('CONNECT')

    if not Client.is_user_authorized(): 
        print('SS l·ªói:',phone)
        return False
    else:

        try:
            print("Acc s·ªë {0} ƒëang ch·∫°y".format(phone)) #m·ªói l·∫ßn ch·∫°y n√≥ s·∫Ω in s·ªë phone ra tr∆∞·ªõc n√®. ok kh√¥ng , l·∫±ng nh·∫±ng ph·∫øt nh·ªâ. ch·ª© m mu·ªën hi·ªán g√¨
            
            Client(StartBotRequest(botid, botid, ref))
            print('START')
            #Client.send_message(botid,"/start")

            if not wait(Client,botid,"Click on Continue before typing the code"): return False
            ######################### solve captcha math#############
            mess = Client.get_messages(botid)
            list = mess[0].text.strip().split(":")
            print(list)

            newlist = list[1].strip().split("=")
            print(newlist)
            newlist0 = newlist[0].strip()
            print(newlist0)

            try:
                list_int = newlist0.split("+")
                cal = int(list_int[0]) + int(list_int[1])
                print(cal) 
                mess[0].click()
                if not wait(Client, botid, "Great, please enter the code."): return False 
                Client.send_message(botid,str(cal))
            except:
                list_int = newlist0.split("-")
                cal = int(list_int[0]) - int(list_int[1])
                print("Ket qua captcha: ",cal)
                mess[0].click() 
                if not wait(Client, botid, "Great, please enter the code."): return False 
                Client.send_message(botid,str(cal))           
            ######################### solve captcha math#############
           

            if not wait(Client, botid, "‚úÖThats correct!"): return False 
            Client(JoinChannelRequest("Gotg_Group"))
            Client(JoinChannelRequest("Gotg_Channel"))
            time.sleep(random.randint(1,5))
            mess = Client.get_messages(botid)
            mess[0].click()
            print('1')

            if not wait(Client, botid, "üîòPlease join"): return False
            mess = Client.get_messages(botid)
            mess[0].click()
            print('2')

            if not wait(Client, botid, "üîòNow please follow"): return False
            Client.send_message(botid, tentw)
            print('3')

            # if not wait(Client, botid, "Please Follow our"): return False
            # Client.send_message(botid, medium)
            # print('3')

           


            # if not wait(Client, botid, "üîòPlease Join our "): return False
            # mess = Client.get_messages(botid)
            # mess[0].click()
            # print('4')

            # if not wait(Client, botid, "Please visit"): return False
            # mess = Client.get_messages(botid)
            # mess[0].click()
            # print('5')

            

           

            if not wait(Client,botid,"Optional + 0.5 GOTG"): return False
            Client(JoinChannelRequest("airdrop6officialchannel"))
            time.sleep(random.randint(1,3))
            mess = Client.get_messages(botid)
            print(mess[0].text)
            mess[0].click()
            print('6')

            if not wait(Client,botid,"Please submit your"): return False
            Client.send_message(botid,wall)
            print('7')

            Client.disconnect()
            print('XONGGGGGGGGGGGGGGGG')

        except: 
            try: 
                Client.disconnect()
            except:pass
            print('T·∫†CHHHHHHHHHHHHHHHH')

def main():

    listtw = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\tw.txt")
    listwall = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\wall.txt")
    listphone = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\test.txt")
    listemail = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\mail.txt")
    listinstagram = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\ins.txt")
    listmedium = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\medium.txt")
    listquote = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\quote.txt")
    listtentw = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\tentw.txt")
    listtenmedium = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\tenmedium.txt")
    listtrx = gettxt("C:\\Users\\vutha\Downloads\\Telegram Desktop\\session\\trx.txt")
    



    api_id = 16084692
    api_hash = 'd2854dd168da24ae3805cc6450488425'
    botid = "GOTGNewAirdropBot"#thay t√™n
    
    ref = "5098202230"#ph·∫£i thay ref
    for i in range(0,250,5): #v√≤ng forr n√†y n√®. v√≠ d·ª• m ch·∫°y 5 lu·ªìng th√¨ n√≥ ch·∫°y t·ª´ 0,1,2,3,4 l√† h·∫øt 5 c√°i. n√™n sau khi ch·∫°y xong th√¨ i n√≥ ph·∫£i tƒÉng th√™m 5 t·ª©c l√† i + 5 n√™n m ph·∫£i set step cho n√≥
        try: #ƒë√≥ step = 5 nghƒ©a l√† m·ªói v√≤ng for ch·∫°y xong th√¨ i tƒÉng l√™n 5 . v√≤ng 2 n√≥ s·∫Ω ch·∫°y 5,6,7,8,9 . ok kh√¥ng , ok good ƒë·∫•y. good clq . ch·∫°y ƒëi

            #trong h√†m n√†y s·∫Ω t·∫°o ƒëa lu·ªìng ok

            # #t·∫°o bi·∫øn ƒëa lu·ªìng
            # p1 = multiprocessing.Process(target=task,args=(listphone[i],api_id,api_hash,botid,listtentw[i],listtenmedium[i],listwall[i],ref)) #ƒë·∫•y √†, ·ª´ m√† m coi tham s·ªë i. truy·ªÅn v√¥ ph·∫£i tƒÉng d·∫ßn kh√¥ng n√≥ tr√πng nhau
            # p2 = multiprocessing.Process(target=task,args=(listphone[i+1],api_id,api_hash,botid,listtentw[i+1],listtenmedium[i+1],listwall[i+1],ref)) #kh√¥ng hi·ªÉu :)) hi·ªÉu r·ªìi. v·∫≠y l√† hi·ªÉu ch∆∞a , r·ªìi ƒë√≥
            # p3 = multiprocessing.Process(target=task,args=(listphone[i+2],api_id,api_hash,botid,listtentw[i+2],listtenmedium[i+2],listwall[i+2],ref)) #ki·ªÉu g√¨ m, ƒë√≥ , th·∫ø ·ªõ h·ªü
            # p4 = multiprocessing.Process(target=task,args=(listphone[i+3],api_id,api_hash,botid,listtentw[i+3],listtenmedium[i+3],listwall[i+3],ref)) # ·ª´m . ch·ªó n√†y c√≥ nghƒ©a l√† v√≠ d·ª• c√°i list phone b·∫Øt ƒë·∫ßu t·ª´ 0 th√¨ lu·ªìng 1 ch·∫°y 1, lu·ªìng 2 n√≥ l·∫•y d√≤ng s·ªë ƒëi·ªán tho·∫°i th·ª© 2, lu·ªìng 3 l·∫•y s·ªë s·ªë th·ª© 3 . m√† trong l·∫≠p tr√¨nh th√¨ d√≤ng 1 n√≥ b·∫Øt ƒë·∫ßu t·ª´ 0 n√™n i l√∫c ƒë·∫ßu b·∫±ng 0 ch·ª© k ph·∫£i b·∫±ng 1 hi·ªÉu k
            # p5 = multiprocessing.Process(target=task,args=(listphone[i+4],api_id,api_hash,botid,listtentw[i+4],listtenmedium[i+4],listwall[i+4],ref)) #ƒë√¢y l√† 1 lu·ªìng, h√†m n√†y c√≥ 2 tham s·ªë, 1 l√† c√°i h√†m c·∫ßn ch·∫°y target, 2 l√† c√°c bi·∫øn truy·ªÅn v√¥ h√†m ƒë√≥ args
            
            p1 = multiprocessing.Process(target=task,args=(listphone[i],api_id,api_hash,botid,listtentw[i],listwall[i],ref)) #ƒë·∫•y √†, ·ª´ m√† m coi tham s·ªë i. truy·ªÅn v√¥ ph·∫£i tƒÉng d·∫ßn kh√¥ng n√≥ tr√πng nhau
            p2 = multiprocessing.Process(target=task,args=(listphone[i+1],api_id,api_hash,botid,listtentw[i+1],listwall[i+1],ref)) #kh√¥ng hi·ªÉu :)) hi·ªÉu r·ªìi. v·∫≠y l√† hi·ªÉu ch∆∞a , r·ªìi ƒë√≥
            p3 = multiprocessing.Process(target=task,args=(listphone[i+2],api_id,api_hash,botid,listtentw[i+2],listwall[i+2],ref)) #ki·ªÉu g√¨ m, ƒë√≥ , th·∫ø ·ªõ h·ªü
            p4 = multiprocessing.Process(target=task,args=(listphone[i+3],api_id,api_hash,botid,listtentw[i+3],listwall[i+3],ref)) # ·ª´m . ch·ªó n√†y c√≥ nghƒ©a l√† v√≠ d·ª• c√°i list phone b·∫Øt ƒë·∫ßu t·ª´ 0 th√¨ lu·ªìng 1 ch·∫°y 1, lu·ªìng 2 n√≥ l·∫•y d√≤ng s·ªë ƒëi·ªán tho·∫°i th·ª© 2, lu·ªìng 3 l·∫•y s·ªë s·ªë th·ª© 3 . m√† trong l·∫≠p tr√¨nh th√¨ d√≤ng 1 n√≥ b·∫Øt ƒë·∫ßu t·ª´ 0 n√™n i l√∫c ƒë·∫ßu b·∫±ng 0 ch·ª© k ph·∫£i b·∫±ng 1 hi·ªÉu k
            p5 = multiprocessing.Process(target=task,args=(listphone[i+4],api_id,api_hash,botid,listtentw[i+4],listwall[i+4],ref)) #ƒë√¢y l√† 1 lu·ªìng, h√†m n√†y c√≥ 2 tham s·ªë, 1 l√† c√°i h√†m c·∫ßn ch·∫°y target, 2 l√† c√°c bi·∫øn truy·ªÅn v√¥ h√†m ƒë√≥ args







            p1.start()
            time.sleep(random.randint(2,5))
            p2.start()
            time.sleep(random.randint(2,5))
            p3.start()
            time.sleep(random.randint(2,5))
            p4.start()
            time.sleep(random.randint(2,5))
            p5.start()
            time.sleep(random.randint(2,5)) #h√†m n√†y ƒë·ªÉ g·ªçi lu·ªìng ch·∫°y
            p1.join() #c√°i n√†y ch·∫°y xong th√¨ n√≥ t·ª± t·∫Øt hay sao . th√¨ b·∫£n ch·∫•t n√≥ l√† ch·∫°y nh∆∞ b√¨nh th∆∞·ªùng ƒë√≥ , nh∆∞ng m√† ch·∫°y nhi·ªÅu c√°i c√πng l√∫c th√¥i. l∆∞u √Ω
            p2.join()
            p3.join()
            p4.join()
            p5.join()
             #h√†m n√†y ƒë·ªÉ ƒë√≥ng lu·ªìng khi ch·∫°y xong

            #m mu·ªën t·∫°o bao nhi√™u lu·ªìng th√¨ c·ª© t·∫°o b·∫•y nhi√™u c√°i p, v√≠ d·ª• p1,p2,p3 v√† truy·ªÅn tham s·ªë v√¥ cho n√≥.5 c√°i. t·∫°o ƒëi

            # print("Acc "+ str(i) + " " + str(listphone[i])) #t∆∞·ªüng n√©m c√°i n√†y l√™n l√† xong c∆°. m ch·∫°y th·ª≠ l√† bi·∫øt , ok ƒë·ªÉ ki·∫øm con bot ch·∫°y th·ª≠
            # task(listphone[i],api_id,api_hash,botid,listtentw[i],listtrx[i],ref)
        except:pass #b·∫≠t c√°i hi·ªán acc ch·∫°y ƒëi m



if __name__ == '__main__':main()